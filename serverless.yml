# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: decisions
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: "3"

provider:
  name: aws
  runtime: python3.8
  memorySize: 512
  timeout: 10
  iamRoleStatements:
    - Effect: Allow
      Action:
        - s3:*
      Resource: "arn:aws:s3:::${env:DECISIONS_S3_BUCKET}/*"
    - Effect: Allow
      Action:
        - s3:*
      Resource: "arn:aws:s3:::${env:DECISIONS_S3_BUCKET}"

  # you can overwrite defaults here
  stage: ${opt:stage, 'dev'}
  region: eu-west-2
  environment:
    SLACK_CLIENT_ID: ${env:SLACK_CLIENT_ID}
    SLACK_CLIENT_SECRET: ${env:SLACK_CLIENT_SECRET}
    SLACK_SIGNING_SECRET: ${env:SLACK_SIGNING_SECRET}
    DECISIONS_S3_BUCKET: ${env:DECISIONS_S3_BUCKET}

# you can add statements to the Lambda function's IAM Role here
#  iam:
#    role:
#      statements:
#        - Effect: "Allow"
#          Action:
#            - "s3:ListBucket"
#          Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#        - Effect: "Allow"
#          Action:
#            - "s3:PutObject"
#          Resource:
#            Fn::Join:
#              - ""
#              - - "arn:aws:s3:::"
#                - "Ref" : "ServerlessDeploymentBucket"
#                - "/*"

# you can define service wide environment variables here
useDotenv: true

# you can add packaging information here
package:
  patterns:
    - decisions_app/**/*.py

functions:
  decision_handler:
    handler: handler.decision_handler
    #    The following are a few example events you can configure
    #    NOTE: Please make sure to change your handler code to work with those events
    #    Check the event documentation for details
    events:
      - httpApi:
          path: /api/v1/decision
          method: post
  oauth_handler:
    handler: handler.oauth_handler
    #    The following are a few example events you can configure
    #    NOTE: Please make sure to change your handler code to work with those events
    #    Check the event documentation for details
    events:
      - httpApi:
          path: /api/v1/oauth_callback
          method: get
  page_handler:
    handler: handler.page_handler
    #    The following are a few example events you can configure
    #    NOTE: Please make sure to change your handler code to work with those events
    #    Check the event documentation for details
    events:
      - httpApi:
          path: /page/{pageName?}
          method: get
          request:
          parameters:
            paths:
              pageName: true

    #      - websocket: $connect
    #      - s3: ${env:BUCKET}
    #      - schedule: rate(10 minutes)
    #      - sns: greeter-topic
    #      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
    #      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
    #      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
    #      - iot:
    #          sql: "SELECT * FROM 'some_topic'"
    #      - cloudwatchEvent:
    #          event:
    #            source:
    #              - "aws.ec2"
    #            detail-type:
    #              - "EC2 Instance State-change Notification"
    #            detail:
    #              state:
    #                - pending
    #      - cloudwatchLog: '/aws/lambda/hello'
    #      - cognitoUserPool:
    #          pool: MyUserPool
    #          trigger: PreSignUp
    #      - alb:
    #          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
    #          priority: 1
    #          conditions:
    #            host: example.com
    #            path: /hello

    #    Define function environment variables here

plugins:
  - serverless-python-requirements
  - serverless-offline

custom:
  pythonRequirements:
    dockerizePip: false
    pythonBin: python3

resources:
  Resources:
    DecisionsDataStorage:
      Type: AWS::S3::Bucket
      Properties:
        AccessControl: Private
        BucketName: ${env:DECISIONS_S3_BUCKET}
